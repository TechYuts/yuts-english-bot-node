// Generated by CoffeeScript 2.3.2
(function() {
  // Description:
  //   alc

  // Dependencies:
  //   "htmlparser": "1.7.6"
  //   "soupselect": "0.2.0"

  // Configuration:
  //   None

  // Commands:
  //   hubot alc me <word> - Show result of word in Japanese

  // Author:
  //   kaneshin
  var HtmlParser, Select, alcUri, channel;

  var request = require('request-promise');

  Select = require("soupselect").select;

  HtmlParser = require("htmlparser");

  alcUri = "http://eow.alc.co.jp/search?";

  channel = "hubot-dev";
    
  module.exports = function(word, bot) {
    var _, item;
    var options = {
      uri: alcUri,
      qs: {
        q: word
      },
      headers: {
        'User-Agent': 'Request-Promise'
      },
      resolveWithFullResponse: true 
    };
    
    request(options).then((res) => {
       var RangeError, handler, i, j, l, len1, li, list, message, ol, parser, processResult, ref1, results, span;
        message = ["今日の単語の「" + word + "」の意味は〜"];
          if (res.statusCode === 200) {
            if (res.headers['content-type'].indexOf('text/html') !== 0) {
              return;
            }
            handler = new HtmlParser.DefaultHandler();
            parser = new HtmlParser.Parser(handler);
            parser.parseComplete(res.body);
            try {
              results = Select(handler.dom, "#resultsList ul li");
            } catch (error) {
              RangeError = error;
              return;
            }
            
            processResult = function(elem) {
              return ((function() {
                var l, len1, ref1, results2;
                ref1 = elem.children;
                results2 = [];
                for (_ = l = 0, len1 = ref1.length; l < len1; _ = ++l) {
                  item = ref1[_];
                  if (item.type === 'text') {
                    results2.push(item.raw);
                  }
                }
                return results2;
              })()).join("");
            };
            
            if (results[0]) {
              span = Select(results[0], "div span.wordclass");
              ref1 = Select(results[0], "div ol");
              for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
                ol = ref1[i];
                message.push(processResult(span[i]));
                list = Select(ol, "li");
                if (list.length === 0) {
                 message.push(processResult(ol));
                } else {
                  (function() {
                    var len2, m, results2;
                    results2 = [];
                    for (j = m = 0, len2 = list.length; m < len2; j = ++m) {
                      li = list[j];
                      if (j < 3) {
                       results2.push(message.push((j + 1) + ". " + processResult(li)));
                      }
                    }
                    return results2;
                  })();
                }
              }
            } else {
              message.push("Not Found");
            }
          } else {
            message.push("Error " + res.statusCode);
          }
      bot.postMessageToChannel(channel, message.join("\n")); 
    }).catch(function (err) {
      console.log(err);
    });
  };
}).call(this);
